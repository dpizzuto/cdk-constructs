"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const aws_s3_1 = require("@aws-cdk/aws-s3");
const aws_sam_1 = require("@aws-cdk/aws-sam");
const core_1 = require("@aws-cdk/core");
class AlexaSkillStack extends core_1.Stack {
    constructor(parent, config) {
        super(parent, config.skillName);
        this.templateOptions.description = `The Alexa Skill ${config.skillName}`;
        const aws = new core_1.ScopedAws(this);
        const assetBucket = new aws_s3_1.Bucket(this, 'AssetBucket', {
            bucketName: `${aws.accountId}-${config.skillName}-${aws.region}-assets`,
        });
        assetBucket.grantPublicAccess();
        const userTable = new aws_sam_1.CfnSimpleTable(this, 'AttributesTable', {
            primaryKey: {
                name: config.userAttribute || 'id',
                type: 'String',
            },
        });
        new aws_sam_1.CfnFunction(this, 'SkillFunction', Object.assign({ handler: 'dist/index.handler', runtime: 'nodejs8.10', timeout: 10, autoPublishAlias: 'latest', codeUri: './skill/dist/bundle.zip', policies: [
                {
                    statement: new aws_iam_1.PolicyStatement({
                        actions: ['dynamodb:Batch*', 'dynamodb:DeleteItem', 'dynamodb:Get*', 'dynamodb:PutItem', 'dynamodb:UpdateItem', 'dynamodb:Query', 'dynamodb:Scan'],
                        // tslint:disable-next-line:no-invalid-template-strings
                        resources: [core_1.Fn.sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AttributesTable}')],
                    }),
                },
            ], environment: {
                variables: Object.assign(Object.assign(Object.assign({}, config.environment), { TABLE_NAME: userTable.ref, ASSET_BUCKET: assetBucket.bucketName, ASSET_BUCKET_URL: assetBucket.bucketWebsiteUrl, SKILL_ID: config.skillId }), config.thundraKey && { thundra_apiKey: config.thundraKey }),
            } }, config.thundraKey && {
            runtime: 'provided',
            layers: [`arn:aws:lambda:${aws.region}:269863060030:layer:thundra-lambda-node-layer:12`],
        }));
        const skillFunctionPermission = new aws_lambda_1.CfnPermission(this, 'SkillFunctionPermission', {
            action: 'lambda:invokeFunction',
            // tslint:disable-next-line:no-invalid-template-strings
            functionName: core_1.Fn.sub('${SkillFunction.Version}'),
            principal: 'alexa-appkit.amazon.com',
        });
        skillFunctionPermission.cfnOptions.deletionPolicy = core_1.CfnDeletionPolicy.RETAIN;
        skillFunctionPermission.cfnOptions.updateReplacePolicy = core_1.CfnDeletionPolicy.RETAIN;
        new core_1.CfnOutput(this, 'overrides', {
            // tslint:disable-next-line:no-invalid-template-strings
            value: core_1.Fn.sub('{"manifest": {"apis": {"custom": {"endpoint": {"uri": "${SkillFunction.Version}"}}}}}'),
        });
    }
}
exports.AlexaSkillStack = AlexaSkillStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJza2lsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUFtRDtBQUNuRCxvREFBb0Q7QUFDcEQsNENBQXlDO0FBQ3pDLDhDQUErRDtBQUMvRCx3Q0FBd0Y7QUFzQnhGLE1BQWEsZUFBZ0IsU0FBUSxZQUFLO0lBQ3RDLFlBQVksTUFBWSxFQUFFLE1BQXlCO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFHLG1CQUFtQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekUsTUFBTSxHQUFHLEdBQUcsSUFBSSxnQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLE1BQU0sV0FBVyxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDaEQsVUFBVSxFQUFFLEdBQUcsR0FBRyxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxNQUFNLFNBQVM7U0FDMUUsQ0FBQyxDQUFDO1FBQ0gsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUMxRCxVQUFVLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLE1BQU0sQ0FBQyxhQUFhLElBQUksSUFBSTtnQkFDbEMsSUFBSSxFQUFFLFFBQVE7YUFDakI7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLHFCQUFXLENBQUMsSUFBSSxFQUFFLGVBQWUsa0JBQ2pDLE9BQU8sRUFBRSxvQkFBb0IsRUFDN0IsT0FBTyxFQUFFLFlBQVksRUFDckIsT0FBTyxFQUFFLEVBQUUsRUFDWCxnQkFBZ0IsRUFBRSxRQUFRLEVBQzFCLE9BQU8sRUFBRSx5QkFBeUIsRUFDbEMsUUFBUSxFQUFFO2dCQUNOO29CQUNJLFNBQVMsRUFBRSxJQUFJLHlCQUFlLENBQUM7d0JBQzNCLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUM7d0JBQ2xKLHVEQUF1RDt3QkFDdkQsU0FBUyxFQUFFLENBQUMsU0FBRSxDQUFDLEdBQUcsQ0FBQyw0RUFBNEUsQ0FBQyxDQUFDO3FCQUNwRyxDQUFDO2lCQUNMO2FBQ0osRUFDRCxXQUFXLEVBQUU7Z0JBQ1QsU0FBUyxnREFDRixNQUFNLENBQUMsV0FBVyxLQUNyQixVQUFVLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFDekIsWUFBWSxFQUFFLFdBQVcsQ0FBQyxVQUFVLEVBQ3BDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsRUFDOUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEtBQ3JCLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUNoRTthQUNKLElBQ0UsTUFBTSxDQUFDLFVBQVUsSUFBSTtZQUNwQixPQUFPLEVBQUUsVUFBVTtZQUNuQixNQUFNLEVBQUUsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLE1BQU0sa0RBQWtELENBQUM7U0FDM0YsRUFDSCxDQUFDO1FBRUgsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLDBCQUFhLENBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFO1lBQy9FLE1BQU0sRUFBRSx1QkFBdUI7WUFDL0IsdURBQXVEO1lBQ3ZELFlBQVksRUFBRSxTQUFFLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDO1lBQ2hELFNBQVMsRUFBRSx5QkFBeUI7U0FDdkMsQ0FBQyxDQUFDO1FBQ0gsdUJBQXVCLENBQUMsVUFBVSxDQUFDLGNBQWMsR0FBRyx3QkFBaUIsQ0FBQyxNQUFNLENBQUM7UUFDN0UsdUJBQXVCLENBQUMsVUFBVSxDQUFDLG1CQUFtQixHQUFHLHdCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUVsRixJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUM3Qix1REFBdUQ7WUFDdkQsS0FBSyxFQUFFLFNBQUUsQ0FBQyxHQUFHLENBQUMsdUZBQXVGLENBQUM7U0FDekcsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBL0RELDBDQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0IHsgQ2ZuUGVybWlzc2lvbiB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgQnVja2V0IH0gZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcbmltcG9ydCB7IENmbkZ1bmN0aW9uLCBDZm5TaW1wbGVUYWJsZSB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1zYW0nO1xuaW1wb3J0IHsgQXBwLCBDZm5EZWxldGlvblBvbGljeSwgQ2ZuT3V0cHV0LCBGbiwgU2NvcGVkQXdzLCBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsZXhhU2tpbGxDb25maWcge1xuICAgIC8qKiBUaGUgQWxleGEgU2tpbGwgaWQgKi9cbiAgICByZWFkb25seSBza2lsbElkIDogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBBbGV4YSBTa2lsbCBuYW1lICovXG4gICAgcmVhZG9ubHkgc2tpbGxOYW1lIDogc3RyaW5nO1xuXG4gICAgLyoqIE9wdGlvbmFsIEFQSSBLZXkgZm9yIFRodW5kcmEgKi9cbiAgICByZWFkb25seSB0aHVuZHJhS2V5PyA6IHN0cmluZztcblxuICAgIC8qKiBFbnZpcm9uZW1lbnQgdmFyaWFibGVzIGZvciB0aGUgTGFtYmRhIGZ1bmN0aW9uICovXG4gICAgcmVhZG9ubHkgZW52aXJvbm1lbnQ/IDogeyBba2V5IDogc3RyaW5nXSA6IHN0cmluZyB9O1xuXG4gICAgLyoqXG4gICAgICogbmFtZSBvZiB0aGUgdXNlciBhdHRyaWJ1dGUgZm9yIER5bmFtb0RCXG4gICAgICogQGRlZmF1bHQgaWRcbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyQXR0cmlidXRlPyA6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEFsZXhhU2tpbGxTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQgOiBBcHAsIGNvbmZpZyA6IEFsZXhhU2tpbGxDb25maWcpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBjb25maWcuc2tpbGxOYW1lKTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZU9wdGlvbnMuZGVzY3JpcHRpb24gPSBgVGhlIEFsZXhhIFNraWxsICR7Y29uZmlnLnNraWxsTmFtZX1gO1xuICAgICAgICBjb25zdCBhd3MgPSBuZXcgU2NvcGVkQXdzKHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0QnVja2V0ID0gbmV3IEJ1Y2tldCh0aGlzLCAnQXNzZXRCdWNrZXQnLCB7XG4gICAgICAgICAgICBidWNrZXROYW1lOiBgJHthd3MuYWNjb3VudElkfS0ke2NvbmZpZy5za2lsbE5hbWV9LSR7YXdzLnJlZ2lvbn0tYXNzZXRzYCxcbiAgICAgICAgfSk7XG4gICAgICAgIGFzc2V0QnVja2V0LmdyYW50UHVibGljQWNjZXNzKCk7XG5cbiAgICAgICAgY29uc3QgdXNlclRhYmxlID0gbmV3IENmblNpbXBsZVRhYmxlKHRoaXMsICdBdHRyaWJ1dGVzVGFibGUnLCB7XG4gICAgICAgICAgICBwcmltYXJ5S2V5OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogY29uZmlnLnVzZXJBdHRyaWJ1dGUgfHwgJ2lkJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnU3RyaW5nJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBDZm5GdW5jdGlvbih0aGlzLCAnU2tpbGxGdW5jdGlvbicsIHtcbiAgICAgICAgICAgIGhhbmRsZXI6ICdkaXN0L2luZGV4LmhhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogJ25vZGVqczguMTAnLFxuICAgICAgICAgICAgdGltZW91dDogMTAsXG4gICAgICAgICAgICBhdXRvUHVibGlzaEFsaWFzOiAnbGF0ZXN0JyxcbiAgICAgICAgICAgIGNvZGVVcmk6ICcuL3NraWxsL2Rpc3QvYnVuZGxlLnppcCcsXG4gICAgICAgICAgICBwb2xpY2llczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50OiBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFsnZHluYW1vZGI6QmF0Y2gqJywgJ2R5bmFtb2RiOkRlbGV0ZUl0ZW0nLCAnZHluYW1vZGI6R2V0KicsICdkeW5hbW9kYjpQdXRJdGVtJywgJ2R5bmFtb2RiOlVwZGF0ZUl0ZW0nLCAnZHluYW1vZGI6UXVlcnknLCAnZHluYW1vZGI6U2NhbiddLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWludmFsaWQtdGVtcGxhdGUtc3RyaW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzOiBbRm4uc3ViKCdhcm46YXdzOmR5bmFtb2RiOiR7QVdTOjpSZWdpb259OiR7QVdTOjpBY2NvdW50SWR9OnRhYmxlLyR7QXR0cmlidXRlc1RhYmxlfScpXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcuZW52aXJvbm1lbnQsXG4gICAgICAgICAgICAgICAgICAgIFRBQkxFX05BTUU6IHVzZXJUYWJsZS5yZWYsXG4gICAgICAgICAgICAgICAgICAgIEFTU0VUX0JVQ0tFVDogYXNzZXRCdWNrZXQuYnVja2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgQVNTRVRfQlVDS0VUX1VSTDogYXNzZXRCdWNrZXQuYnVja2V0V2Vic2l0ZVVybCxcbiAgICAgICAgICAgICAgICAgICAgU0tJTExfSUQ6IGNvbmZpZy5za2lsbElkLFxuICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcudGh1bmRyYUtleSAmJiB7IHRodW5kcmFfYXBpS2V5OiBjb25maWcudGh1bmRyYUtleSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4uY29uZmlnLnRodW5kcmFLZXkgJiYge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWU6ICdwcm92aWRlZCcsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBbYGFybjphd3M6bGFtYmRhOiR7YXdzLnJlZ2lvbn06MjY5ODYzMDYwMDMwOmxheWVyOnRodW5kcmEtbGFtYmRhLW5vZGUtbGF5ZXI6MTJgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNraWxsRnVuY3Rpb25QZXJtaXNzaW9uID0gbmV3IENmblBlcm1pc3Npb24odGhpcywgJ1NraWxsRnVuY3Rpb25QZXJtaXNzaW9uJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbGFtYmRhOmludm9rZUZ1bmN0aW9uJyxcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnZhbGlkLXRlbXBsYXRlLXN0cmluZ3NcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogRm4uc3ViKCcke1NraWxsRnVuY3Rpb24uVmVyc2lvbn0nKSxcbiAgICAgICAgICAgIHByaW5jaXBhbDogJ2FsZXhhLWFwcGtpdC5hbWF6b24uY29tJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHNraWxsRnVuY3Rpb25QZXJtaXNzaW9uLmNmbk9wdGlvbnMuZGVsZXRpb25Qb2xpY3kgPSBDZm5EZWxldGlvblBvbGljeS5SRVRBSU47XG4gICAgICAgIHNraWxsRnVuY3Rpb25QZXJtaXNzaW9uLmNmbk9wdGlvbnMudXBkYXRlUmVwbGFjZVBvbGljeSA9IENmbkRlbGV0aW9uUG9saWN5LlJFVEFJTjtcblxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdvdmVycmlkZXMnLCB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW52YWxpZC10ZW1wbGF0ZS1zdHJpbmdzXG4gICAgICAgICAgICB2YWx1ZTogRm4uc3ViKCd7XCJtYW5pZmVzdFwiOiB7XCJhcGlzXCI6IHtcImN1c3RvbVwiOiB7XCJlbmRwb2ludFwiOiB7XCJ1cmlcIjogXCIke1NraWxsRnVuY3Rpb24uVmVyc2lvbn1cIn19fX19JyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==