"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_apigateway_1 = require("@aws-cdk/aws-apigateway");
const aws_certificatemanager_1 = require("@aws-cdk/aws-certificatemanager");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_elasticloadbalancingv2_1 = require("@aws-cdk/aws-elasticloadbalancingv2");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const aws_route53_targets_1 = require("@aws-cdk/aws-route53-targets");
const core_1 = require("@aws-cdk/core");
const custom_resources_1 = require("@aws-cdk/custom-resources");
class InternalRestApi extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.stack = core_1.Stack.of(this);
        this.internalCertificate = props.certificate || new aws_certificatemanager_1.DnsValidatedCertificate(this, 'Certificate', {
            hostedZone: props.hostedZone,
            domainName: props.domainName,
        });
        this.vpce = new aws_ec2_1.InterfaceVpcEndpoint(this, 'APIGWEndpoint', { privateDnsEnabled: false, service: aws_ec2_1.InterfaceVpcEndpointAwsService.APIGATEWAY, vpc: props.vpc });
        this.api = new aws_apigateway_1.RestApi(this, 'Resource', Object.assign(Object.assign({}, props.apiProps), { endpointTypes: [aws_apigateway_1.EndpointType.PRIVATE], domainName: {
                endpointType: aws_apigateway_1.EndpointType.REGIONAL,
                domainName: props.domainName,
                certificate: this.internalCertificate,
            }, policy: new aws_iam_1.PolicyDocument({
                statements: [
                    new aws_iam_1.PolicyStatement({
                        principals: [new aws_iam_1.AnyPrincipal()],
                        actions: ['execute-api:Invoke'],
                        resources: [`arn:aws:execute-api:${core_1.Aws.REGION}:${core_1.Aws.ACCOUNT_ID}:*`],
                    }),
                    new aws_iam_1.PolicyStatement({
                        effect: aws_iam_1.Effect.DENY,
                        principals: [new aws_iam_1.AnyPrincipal()],
                        actions: ['execute-api:Invoke'],
                        resources: [`arn:aws:execute-api:${core_1.Aws.REGION}:${core_1.Aws.ACCOUNT_ID}:*`],
                        conditions: { StringNotEquals: { 'aws:SourceVpce': this.vpce.vpcEndpointId } },
                    }),
                ],
            }) }));
        this.restApiId = this.api.restApiId;
        this.alb = new aws_elasticloadbalancingv2_1.ApplicationLoadBalancer(this, 'InternalALB', { vpc: props.vpc, securityGroup: props.securityGroup });
        this.vpce.connections.allowFrom(this.alb, aws_ec2_1.Port.tcp(443));
        const targetGroup = new aws_elasticloadbalancingv2_1.ApplicationTargetGroup(this, 'TargetGroup', {
            vpc: props.vpc,
            targetType: aws_elasticloadbalancingv2_1.TargetType.IP,
            port: 443,
        });
        for (let index = 0; index < props.vpc.availabilityZones.length; index++) {
            const getEndpointIp = new custom_resources_1.AwsCustomResource(this, `GetEndpointIp${index}`, {
                onUpdate: {
                    service: 'EC2',
                    action: 'describeNetworkInterfaces',
                    outputPath: `NetworkInterfaces.${index}.PrivateIpAddress`,
                    parameters: { NetworkInterfaceIds: this.vpce.vpcEndpointNetworkInterfaceIds },
                    physicalResourceIdPath: `NetworkInterfaces.${index}.PrivateIpAddress`,
                },
            });
            targetGroup.addTarget(new aws_elasticloadbalancingv2_1.IpTarget(core_1.Token.asString(getEndpointIp.getData(`NetworkInterfaces.${index}.PrivateIpAddress`))));
        }
        this.alb.addListener('Listener', {
            certificateArns: [this.internalCertificate.certificateArn],
            port: 443,
            defaultTargetGroups: [targetGroup],
        });
        targetGroup.configureHealthCheck({
            healthyHttpCodes: '403',
            healthyThresholdCount: 2,
            unhealthyThresholdCount: 2,
            interval: core_1.Duration.seconds(30),
            timeout: core_1.Duration.seconds(5),
            path: '/',
            protocol: aws_elasticloadbalancingv2_1.Protocol.HTTPS,
        });
        new aws_route53_1.ARecord(this, 'R53Alias', {
            recordName: props.domainName,
            zone: props.hostedZone,
            target: aws_route53_1.RecordTarget.fromAlias(new aws_route53_targets_1.LoadBalancerTarget(this.alb)),
        });
    }
}
exports.InternalRestApi = InternalRestApi;
//# sourceMappingURL=data:application/json;base64,