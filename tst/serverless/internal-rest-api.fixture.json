{
  "Resources": {
    "VPCB9E5F0B4": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          }
        ]
      }
    },
    "VPCPublicSubnet1SubnetB4246D30": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet1"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          }
        ]
      }
    },
    "VPCPublicSubnet1RouteTableFEE4B781": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet1"
          }
        ]
      }
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781"
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet1SubnetB4246D30"
        }
      }
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCIGWB7E252D3"
        }
      },
      "DependsOn": [
        "VPCVPCGW99B986DC"
      ]
    },
    "VPCPublicSubnet1EIP6AD938E8": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VPCPublicSubnet1NATGatewayE0556630": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet1SubnetB4246D30"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet1"
          }
        ]
      }
    },
    "VPCPublicSubnet2Subnet74179F39": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet2"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          }
        ]
      }
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet2"
          }
        ]
      }
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1"
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet2Subnet74179F39"
        }
      }
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCIGWB7E252D3"
        }
      },
      "DependsOn": [
        "VPCVPCGW99B986DC"
      ]
    },
    "VPCPublicSubnet2EIP4947BC00": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VPCPublicSubnet2NATGateway3C070193": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VPCPublicSubnet2EIP4947BC00",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet2Subnet74179F39"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PublicSubnet2"
          }
        ]
      }
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PrivateSubnet1"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          }
        ]
      }
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PrivateSubnet1"
          }
        ]
      }
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027"
        },
        "SubnetId": {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
        }
      }
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630"
        }
      }
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.192.0/18",
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PrivateSubnet2"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          }
        ]
      }
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC/PrivateSubnet2"
          }
        ]
      }
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E"
        },
        "SubnetId": {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
        }
      }
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VPCPublicSubnet2NATGateway3C070193"
        }
      }
    },
    "VPCIGWB7E252D3": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          }
        ]
      }
    },
    "VPCVPCGW99B986DC": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "InternetGatewayId": {
          "Ref": "VPCIGWB7E252D3"
        }
      }
    },
    "HostedZoneDB99F866": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "Name": "example.com."
      }
    },
    "RestApiCertificateCertificateRequestorFunctionServiceRole7E9E7BB7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "RestApiCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy817B2ADE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:route53:::hostedzone/",
                    {
                      "Ref": "HostedZoneDB99F866"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "RestApiCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy817B2ADE",
        "Roles": [
          {
            "Ref": "RestApiCertificateCertificateRequestorFunctionServiceRole7E9E7BB7"
          }
        ]
      }
    },
    "RestApiCertificateCertificateRequestorFunctionC1DF1256": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0S3Bucket0997A4A0"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0S3VersionKey83D9C166"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0S3VersionKey83D9C166"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.certificateRequestHandler",
        "Role": {
          "Fn::GetAtt": [
            "RestApiCertificateCertificateRequestorFunctionServiceRole7E9E7BB7",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 900
      },
      "DependsOn": [
        "RestApiCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy817B2ADE",
        "RestApiCertificateCertificateRequestorFunctionServiceRole7E9E7BB7"
      ]
    },
    "RestApiCertificateCertificateRequestorResource4F381A1D": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "RestApiCertificateCertificateRequestorFunctionC1DF1256",
            "Arn"
          ]
        },
        "DomainName": "api.example.com",
        "HostedZoneId": {
          "Ref": "HostedZoneDB99F866"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "RestApiAPIGWEndpointSecurityGroup92BB8C1C": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RestApi/APIGWEndpoint/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        }
      }
    },
    "RestApiAPIGWEndpointSecurityGroupfromRestApiInternalALBSecurityGroupB91BB0BD44339DFA20E": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "from RestApiInternalALBSecurityGroupB91BB0BD:443",
        "FromPort": 443,
        "GroupId": {
          "Fn::GetAtt": [
            "RestApiAPIGWEndpointSecurityGroup92BB8C1C",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "RestApiInternalALBSecurityGroupC277CE4F",
            "GroupId"
          ]
        },
        "ToPort": 443
      }
    },
    "RestApiAPIGWEndpoint0E769B4B": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".execute-api"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        },
        "PrivateDnsEnabled": false,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "RestApiAPIGWEndpointSecurityGroup92BB8C1C",
              "GroupId"
            ]
          }
        ],
        "SubnetIds": [
          {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
          },
          {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
          }
        ],
        "VpcEndpointType": "Interface"
      }
    },
    "RestApiFA9A4412": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "EndpointConfiguration": {
          "Types": [
            "PRIVATE"
          ]
        },
        "Name": "Resource",
        "Policy": {
          "Statement": [
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":*"
                  ]
                ]
              }
            },
            {
              "Action": "execute-api:Invoke",
              "Condition": {
                "StringNotEquals": {
                  "aws:SourceVpce": {
                    "Ref": "RestApiAPIGWEndpoint0E769B4B"
                  }
                }
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "RestApiDeploymentEFEC23706390e9e8dc599c2ce66161ef22de8614": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "RestApifoobarGET21D99F9B",
        "RestApifoobar7A0DC07C",
        "RestApifoo1886E599"
      ]
    },
    "RestApiDeploymentStageprod09FC9B34": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        },
        "DeploymentId": {
          "Ref": "RestApiDeploymentEFEC23706390e9e8dc599c2ce66161ef22de8614"
        },
        "StageName": "prod"
      }
    },
    "RestApiCloudWatchRoleC10412B9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      }
    },
    "RestApiAccount4EF2B2A0": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "RestApiCloudWatchRoleC10412B9",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RestApiFA9A4412"
      ]
    },
    "RestApifoo1886E599": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "RestApiFA9A4412",
            "RootResourceId"
          ]
        },
        "PathPart": "foo",
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        }
      }
    },
    "RestApifoobar7A0DC07C": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "RestApifoo1886E599"
        },
        "PathPart": "bar",
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        }
      }
    },
    "RestApifoobarGET21D99F9B": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "RestApifoobar7A0DC07C"
        },
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK"
        }
      }
    },
    "RestApiCustomDomainED63E960": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": "api.example.com",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "RegionalCertificateArn": {
          "Fn::GetAtt": [
            "RestApiCertificateCertificateRequestorResource4F381A1D",
            "Arn"
          ]
        }
      }
    },
    "RestApiCustomDomainMapRestApi0C43BF4B197418D8": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "DomainName": {
          "Ref": "RestApiCustomDomainED63E960"
        },
        "RestApiId": {
          "Ref": "RestApiFA9A4412"
        },
        "Stage": {
          "Ref": "RestApiDeploymentStageprod09FC9B34"
        }
      }
    },
    "RestApiInternalALB6A200F7B": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "RestApiInternalALBSecurityGroupC277CE4F",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
          },
          {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
          }
        ],
        "Type": "application"
      }
    },
    "RestApiInternalALBSecurityGroupC277CE4F": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB RestApiInternalALB012A0968",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        }
      }
    },
    "RestApiInternalALBSecurityGrouptoRestApiAPIGWEndpointSecurityGroupC80DB8B5443B1979753": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "RestApiInternalALBSecurityGroupC277CE4F",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "to RestApiAPIGWEndpointSecurityGroupC80DB8B5:443",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "RestApiAPIGWEndpointSecurityGroup92BB8C1C",
            "GroupId"
          ]
        },
        "FromPort": 443,
        "ToPort": 443
      }
    },
    "RestApiInternalALBListener27F224BF": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "RestApiTargetGroup1516BBEA"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "RestApiInternalALB6A200F7B"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::GetAtt": [
                "RestApiCertificateCertificateRequestorResource4F381A1D",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "RestApiTargetGroup1516BBEA": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTPS",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "403"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "RestApiGetEndpointIp0958420A3",
                "NetworkInterfaces.0.PrivateIpAddress"
              ]
            }
          },
          {
            "Id": {
              "Fn::GetAtt": [
                "RestApiGetEndpointIp1B2415B58",
                "NetworkInterfaces.1.PrivateIpAddress"
              ]
            }
          }
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VPCB9E5F0B4"
        }
      }
    },
    "RestApiGetEndpointIp0958420A3": {
      "Type": "Custom::AWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn"
          ]
        },
        "Create": {
          "service": "EC2",
          "action": "describeNetworkInterfaces",
          "outputPath": "NetworkInterfaces.0.PrivateIpAddress",
          "parameters": {
            "NetworkInterfaceIds": {
              "Fn::GetAtt": [
                "RestApiAPIGWEndpoint0E769B4B",
                "NetworkInterfaceIds"
              ]
            }
          },
          "physicalResourceIdPath": "NetworkInterfaces.0.PrivateIpAddress"
        },
        "Update": {
          "service": "EC2",
          "action": "describeNetworkInterfaces",
          "outputPath": "NetworkInterfaces.0.PrivateIpAddress",
          "parameters": {
            "NetworkInterfaceIds": {
              "Fn::GetAtt": [
                "RestApiAPIGWEndpoint0E769B4B",
                "NetworkInterfaceIds"
              ]
            }
          },
          "physicalResourceIdPath": "NetworkInterfaces.0.PrivateIpAddress"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "RestApiGetEndpointIp1B2415B58": {
      "Type": "Custom::AWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn"
          ]
        },
        "Create": {
          "service": "EC2",
          "action": "describeNetworkInterfaces",
          "outputPath": "NetworkInterfaces.1.PrivateIpAddress",
          "parameters": {
            "NetworkInterfaceIds": {
              "Fn::GetAtt": [
                "RestApiAPIGWEndpoint0E769B4B",
                "NetworkInterfaceIds"
              ]
            }
          },
          "physicalResourceIdPath": "NetworkInterfaces.1.PrivateIpAddress"
        },
        "Update": {
          "service": "EC2",
          "action": "describeNetworkInterfaces",
          "outputPath": "NetworkInterfaces.1.PrivateIpAddress",
          "parameters": {
            "NetworkInterfaceIds": {
              "Fn::GetAtt": [
                "RestApiAPIGWEndpoint0E769B4B",
                "NetworkInterfaceIds"
              ]
            }
          },
          "physicalResourceIdPath": "NetworkInterfaces.1.PrivateIpAddress"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "RestApiR53Alias1C4D84A8": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": "api.example.com.",
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "RestApiInternalALB6A200F7B",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "RestApiInternalALB6A200F7B",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "HostedZoneId": {
          "Ref": "HostedZoneDB99F866"
        }
      }
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeNetworkInterfaces",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
          }
        ]
      }
    },
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0S3BucketBD296F9A"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0S3VersionKey9F83BE86"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0S3VersionKey9F83BE86"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 30
      },
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
      ]
    }
  },
  "Outputs": {
    "RestApiEndpoint575871DF": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "RestApiFA9A4412"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "RestApiDeploymentStageprod09FC9B34"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Parameters": {
    "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0S3Bucket0997A4A0": {
      "Type": "String",
      "Description": "S3 bucket for asset \"0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0\""
    },
    "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0S3VersionKey83D9C166": {
      "Type": "String",
      "Description": "S3 key for asset version \"0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0\""
    },
    "AssetParameters0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0ArtifactHashF8F836D1": {
      "Type": "String",
      "Description": "Artifact hash for asset \"0b9723d54b7db3fbfc1a143398b02392e5fe080a68535480782a949b4372d0f0\""
    },
    "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0S3BucketBD296F9A": {
      "Type": "String",
      "Description": "S3 bucket for asset \"15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0\""
    },
    "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0S3VersionKey9F83BE86": {
      "Type": "String",
      "Description": "S3 key for asset version \"15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0\""
    },
    "AssetParameters15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0ArtifactHashCEB9D888": {
      "Type": "String",
      "Description": "Artifact hash for asset \"15bc9bc219e7636b5a5b2c24a968fdce7e0c597fb9ac64af69a83942e6f640e0\""
    }
  }
}